{
  "version": 3,
  "file": "main.cjs",
  "sources": [
    "../../src/internal/valueToType.js",
    "../../src/internal/boolean.js",
    "../../src/internal/null.js",
    "../../src/internal/number.js",
    "../../src/internal/util.js",
    "../../src/internal/string.js",
    "../../src/internal/symbol.js",
    "../../src/internal/undefined.js",
    "../../src/internal/bigint.js",
    "../../src/internal/primitiveMap.js",
    "../../src/internal/constructor.js",
    "../../src/internal/array.js",
    "../../src/internal/bigint-object.js",
    "../../src/internal/boolean-object.js",
    "../../src/internal/error.js",
    "../../src/internal/date.js",
    "../../src/internal/function.js",
    "../../src/internal/number-object.js",
    "../../src/internal/object.js",
    "../../src/internal/regexp.js",
    "../../src/internal/string-object.js",
    "../../src/internal/compositeMap.js",
    "../../src/inspect.js"
  ],
  "sourcesContent": [
    "export const valueToType = (value) => {\n  const primitiveType = valueToPrimitiveType(value)\n  if (primitiveType === \"function\") {\n    return { compositeType: \"Function\" }\n  }\n\n  if (primitiveType === \"object\") {\n    const compositeType = valueToCompositeType(value)\n    return { compositeType }\n  }\n\n  return { primitiveType }\n}\n\nconst { toString } = Object.prototype\n\nconst valueToCompositeType = (object) => {\n  if (typeof object === \"object\" && Object.getPrototypeOf(object) === null) {\n    return \"Object\"\n  }\n\n  const toStringResult = toString.call(object)\n  // returns format is '[object ${tagName}]';\n  // and we want ${tagName}\n  const tagName = toStringResult.slice(\"[object \".length, -1)\n  if (tagName === \"Object\") {\n    const objectConstructorName = object.constructor.name\n    if (objectConstructorName !== \"Object\") {\n      return objectConstructorName\n    }\n  }\n\n  return tagName\n}\n\nconst valueToPrimitiveType = (value) => {\n  if (value === null) {\n    return \"null\"\n  }\n\n  if (value === undefined) {\n    return \"undefined\"\n  }\n\n  return typeof value\n}\n",
    "export const inspectBoolean = (value) => value.toString()\n",
    "export const inspectNull = () => \"null\"\n",
    "// https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/rules/numeric-separators-style.js\n\nexport const inspectNumber = (value, { numericSeparator }) => {\n  if (isNegativeZero(value)) {\n    return \"-0\"\n  }\n\n  // isNaN\n  // eslint-disable-next-line no-self-compare\n  if (value !== value) {\n    return \"NaN\"\n  }\n\n  if (value === Infinity) {\n    return \"Infinity\"\n  }\n\n  if (value === -Infinity) {\n    return \"-Infinity\"\n  }\n\n  const numberString = String(value)\n\n  if (!numericSeparator) {\n    return numberString\n  }\n\n  const { number, mark = \"\", sign = \"\", power = \"\" } = numberString.match(\n    /^(?<number>.*?)(?:(?<mark>e)(?<sign>[+-])?(?<power>\\d+))?$/i,\n  ).groups\n  const numberWithSeparators = formatNumber(number)\n  const powerWithSeparators = addSeparator(power, {\n    minimumDigits: 5,\n    groupLength: 3,\n  })\n  return `${numberWithSeparators}${mark}${sign}${powerWithSeparators}`\n}\n\n// Use this and instead of Object.is(value, -0)\n// because in some corner cases firefox returns false\n// for Object.is(-0, -0)\nconst isNegativeZero = (value) => {\n  return value === 0 && 1 / value === -Infinity\n}\n\nconst formatNumber = (numberString) => {\n  const parts = numberString.split(\".\")\n  const [integer, fractional] = parts\n\n  if (parts.length === 2) {\n    const integerWithSeparators = addSeparator(integer, {\n      minimumDigits: 5,\n      groupLength: 3,\n    })\n    const fractionalWithSeparators = addSeparatorFromLeft(fractional, {\n      minimumDigits: 5,\n      groupLength: 3,\n    })\n    return `${integerWithSeparators}.${fractionalWithSeparators}`\n  }\n\n  return addSeparator(integer, {\n    minimumDigits: 5,\n    groupLength: 3,\n  })\n}\n\nconst addSeparator = (numberString, { minimumDigits, groupLength }) => {\n  if (numberString[0] === \"-\") {\n    return `-${groupDigits(numberString.slice(1), { minimumDigits, groupLength })}`\n  }\n  return groupDigits(numberString, { minimumDigits, groupLength })\n}\n\nconst groupDigits = (digits, { minimumDigits, groupLength }) => {\n  const digitCount = digits.length\n  if (digitCount < minimumDigits) {\n    return digits\n  }\n\n  let digitsWithSeparator = digits.slice(-groupLength)\n  let remainingDigits = digits.slice(0, -groupLength)\n  while (remainingDigits.length) {\n    const group = remainingDigits.slice(-groupLength)\n    remainingDigits = remainingDigits.slice(0, -groupLength)\n    digitsWithSeparator = `${group}_${digitsWithSeparator}`\n  }\n  return digitsWithSeparator\n}\n\nconst addSeparatorFromLeft = (value, { minimumDigits, groupLength }) => {\n  const { length } = value\n  if (length < minimumDigits) {\n    return value\n  }\n\n  const parts = []\n  for (let start = 0; start < length; start += groupLength) {\n    const end = Math.min(start + groupLength, length)\n    parts.push(value.slice(start, end))\n  }\n  return parts.join(\"_\")\n}\n",
    "// https://github.com/joliss/js-string-escape/blob/master/index.js\n// http://javascript.crockford.com/remedial.html\nexport const quote = (value) => {\n  const string = String(value)\n  let i = 0\n  const j = string.length\n  var escapedString = \"\"\n  while (i < j) {\n    const char = string[i]\n    let escapedChar\n    if (char === '\"' || char === \"'\" || char === \"\\\\\") {\n      escapedChar = `\\\\${char}`\n    } else if (char === \"\\n\") {\n      escapedChar = \"\\\\n\"\n    } else if (char === \"\\r\") {\n      escapedChar = \"\\\\r\"\n    } else if (char === \"\\u2028\") {\n      escapedChar = \"\\\\u2028\"\n    } else if (char === \"\\u2029\") {\n      escapedChar = \"\\\\u2029\"\n    } else {\n      escapedChar = char\n    }\n    escapedString += escapedChar\n    i++\n  }\n  return escapedString\n}\n\nexport const preNewLineAndIndentation = (value, { depth, indentUsingTab, indentSize }) => {\n  return `${newLineAndIndent({\n    count: depth + 1,\n    useTabs: indentUsingTab,\n    size: indentSize,\n  })}${value}`\n}\n\nconst postNewLineAndIndentation = ({ depth, indentUsingTab, indentSize }) => {\n  return newLineAndIndent({ count: depth, useTabs: indentUsingTab, size: indentSize })\n}\n\nconst newLineAndIndent = ({ count, useTabs, size }) => {\n  if (useTabs) {\n    // eslint-disable-next-line prefer-template\n    return \"\\n\" + \"\\t\".repeat(count)\n  }\n  // eslint-disable-next-line prefer-template\n  return \"\\n\" + \" \".repeat(count * size)\n}\n\nexport const wrapNewLineAndIndentation = (value, { depth, indentUsingTab, indentSize }) => {\n  return `${preNewLineAndIndentation(value, {\n    depth,\n    indentUsingTab,\n    indentSize,\n  })}${postNewLineAndIndentation({ depth, indentUsingTab, indentSize })}`\n}\n",
    "import { quote } from \"./util.js\"\n\nexport const inspectString = (value, { singleQuote }) => {\n  const quotedValue = quote(value)\n  return singleQuote ? `'${quotedValue}'` : `\"${quotedValue}\"`\n}\n",
    "export const inspectSymbol = (value, { nestedInspect, parenthesis }) => {\n  const symbolDescription = symbolToDescription(value)\n  const symbolDescriptionSource = symbolDescription ? nestedInspect(symbolDescription) : \"\"\n  const symbolSource = `Symbol(${symbolDescriptionSource})`\n\n  if (parenthesis) return `${symbolSource}`\n  return symbolSource\n}\n\nconst symbolToDescription =\n  \"description\" in Symbol.prototype\n    ? (symbol) => symbol.description\n    : (symbol) => {\n        const toStringResult = symbol.toString()\n        const openingParenthesisIndex = toStringResult.indexOf(\"(\")\n        const closingParenthesisIndex = toStringResult.indexOf(\")\")\n        const symbolDescription = toStringResult.slice(\n          openingParenthesisIndex + 1,\n          closingParenthesisIndex,\n        )\n        return symbolDescription\n      }\n",
    "export const inspectUndefined = () => \"undefined\"\n",
    "export const inspectBigInt = (value) => {\n  return `${value}n`\n}\n",
    "import { inspectBoolean } from \"./boolean.js\"\nimport { inspectNull } from \"./null.js\"\nimport { inspectNumber } from \"./number.js\"\nimport { inspectString } from \"./string.js\"\nimport { inspectSymbol } from \"./symbol.js\"\nimport { inspectUndefined } from \"./undefined.js\"\nimport { inspectBigInt } from \"./bigint.js\"\n\nexport const primitiveMap = {\n  boolean: inspectBoolean,\n  null: inspectNull,\n  number: inspectNumber,\n  string: inspectString,\n  symbol: inspectSymbol,\n  undefined: inspectUndefined,\n  bigint: inspectBigInt,\n}\n",
    "export const inspectConstructor = (value, { parenthesis, useNew }) => {\n  let formattedString = value\n\n  if (parenthesis) {\n    formattedString = `(${value})`\n  }\n\n  if (useNew) {\n    formattedString = `new ${formattedString}`\n  }\n\n  return formattedString\n}\n",
    "import { preNewLineAndIndentation, wrapNewLineAndIndentation } from \"./util.js\"\nimport { inspectConstructor } from \"./constructor.js\"\n\nexport const inspectArray = (\n  value,\n  { seen = [], nestedInspect, depth, indentUsingTab, indentSize, parenthesis, useNew },\n) => {\n  if (seen.indexOf(value) > -1) {\n    return \"Symbol.for('circular')\"\n  }\n  seen.push(value)\n\n  let valuesSource = \"\"\n  let i = 0\n  const j = value.length\n\n  while (i < j) {\n    const valueSource = value.hasOwnProperty(i) ? nestedInspect(value[i], { seen }) : \"\"\n    if (i === 0) {\n      valuesSource += valueSource\n    } else {\n      valuesSource += `,${preNewLineAndIndentation(valueSource, {\n        depth,\n        indentUsingTab,\n        indentSize,\n      })}`\n    }\n    i++\n  }\n\n  let arraySource\n  if (valuesSource.length) {\n    arraySource = wrapNewLineAndIndentation(valuesSource, { depth, indentUsingTab, indentSize })\n  } else {\n    arraySource = \"\"\n  }\n\n  arraySource = `[${arraySource}]`\n\n  return inspectConstructor(arraySource, { parenthesis, useNew })\n}\n",
    "export const inspectBigIntObject = (value, { nestedInspect }) => {\n  const bigIntSource = nestedInspect(value.valueOf())\n\n  return `BigInt(${bigIntSource})`\n}\n",
    "import { inspectConstructor } from \"./constructor.js\"\n\nexport const inspectBooleanObject = (value, { nestedInspect, useNew, parenthesis }) => {\n  const booleanSource = nestedInspect(value.valueOf())\n  return inspectConstructor(`Boolean(${booleanSource})`, { useNew, parenthesis })\n}\n",
    "import { inspectConstructor } from \"./constructor.js\"\n\nexport const inspectError = (error, { nestedInspect, useNew, parenthesis }) => {\n  const messageSource = nestedInspect(error.message)\n\n  const errorSource = inspectConstructor(`${errorToConstructorName(error)}(${messageSource})`, {\n    useNew,\n    parenthesis,\n  })\n  return errorSource\n}\n\nconst errorToConstructorName = ({ name }) => {\n  if (derivedErrorNameArray.includes(name)) {\n    return name\n  }\n  return \"Error\"\n}\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Error_types\nconst derivedErrorNameArray = [\n  \"EvalError\",\n  \"RangeError\",\n  \"ReferenceError\",\n  \"SyntaxError\",\n  \"TypeError\",\n  \"URIError\",\n]\n",
    "import { inspectConstructor } from \"./constructor.js\"\n\nexport const inspectDate = (value, { nestedInspect, useNew, parenthesis }) => {\n  const dateSource = nestedInspect(value.valueOf(), {\n    numericSeparator: false,\n  })\n  return inspectConstructor(`Date(${dateSource})`, { useNew, parenthesis })\n}\n",
    "export const inspectFunction = (value, { showFunctionBody, parenthesis, depth }) => {\n  let functionSource\n  if (showFunctionBody) {\n    functionSource = value.toString()\n  } else {\n    const isArrowFunction = value.prototype === undefined\n    const head = isArrowFunction ? \"() =>\" : `function ${depth === 0 ? value.name : \"\"}()`\n    functionSource = `${head} {/* hidden */}`\n  }\n\n  if (parenthesis) {\n    return `(${functionSource})`\n  }\n  return functionSource\n}\n",
    "import { inspectConstructor } from \"./constructor.js\"\n\nexport const inspectNumberObject = (value, { nestedInspect, useNew, parenthesis }) => {\n  const numberSource = nestedInspect(value.valueOf())\n  return inspectConstructor(`Number(${numberSource})`, { useNew, parenthesis })\n}\n",
    "import { preNewLineAndIndentation, wrapNewLineAndIndentation } from \"./util.js\"\nimport { inspectConstructor } from \"./constructor.js\"\n\nexport const inspectObject = (\n  value,\n  {\n    nestedInspect,\n    seen = [],\n    depth,\n    indentUsingTab,\n    indentSize,\n    objectConstructor,\n    parenthesis,\n    useNew,\n  },\n) => {\n  if (seen.indexOf(value) > -1) return \"Symbol.for('circular')\"\n\n  seen.push(value)\n\n  const propertySourceArray = []\n  Object.getOwnPropertyNames(value).forEach((propertyName) => {\n    const propertyNameAsNumber = parseInt(propertyName, 10)\n    const propertyNameSource = nestedInspect(\n      Number.isInteger(propertyNameAsNumber) ? propertyNameAsNumber : propertyName,\n    )\n    propertySourceArray.push({\n      nameOrSymbolSource: propertyNameSource,\n      valueSource: nestedInspect(value[propertyName], { seen }),\n    })\n  })\n  Object.getOwnPropertySymbols(value).forEach((symbol) => {\n    propertySourceArray.push({\n      nameOrSymbolSource: `[${nestedInspect(symbol)}]`,\n      valueSource: nestedInspect(value[symbol], { seen }),\n    })\n  })\n\n  let propertiesSource = \"\"\n  propertySourceArray.forEach(({ nameOrSymbolSource, valueSource }, index) => {\n    if (index === 0) {\n      propertiesSource += `${nameOrSymbolSource}: ${valueSource}`\n    } else {\n      propertiesSource += `,${preNewLineAndIndentation(`${nameOrSymbolSource}: ${valueSource}`, {\n        depth,\n        indentUsingTab,\n        indentSize,\n      })}`\n    }\n  })\n\n  let objectSource\n  if (propertiesSource.length) {\n    objectSource = `${wrapNewLineAndIndentation(propertiesSource, {\n      depth,\n      indentUsingTab,\n      indentSize,\n    })}`\n  } else {\n    objectSource = \"\"\n  }\n\n  if (objectConstructor) {\n    objectSource = `Object({${objectSource}})`\n  } else {\n    objectSource = `{${objectSource}}`\n  }\n\n  return inspectConstructor(objectSource, { parenthesis, useNew })\n}\n",
    "export const inspectRegExp = (value) => value.toString()\n",
    "import { inspectConstructor } from \"./constructor.js\"\n\nexport const inspectStringObject = (value, { nestedInspect, useNew, parenthesis }) => {\n  const stringSource = nestedInspect(value.valueOf())\n\n  return inspectConstructor(`String(${stringSource})`, { useNew, parenthesis })\n}\n",
    "import { inspectArray } from \"./array.js\"\nimport { inspectBigIntObject } from \"./bigint-object.js\"\nimport { inspectBooleanObject } from \"./boolean-object.js\"\nimport { inspectError } from \"./error.js\"\nimport { inspectDate } from \"./date.js\"\nimport { inspectFunction } from \"./function.js\"\nimport { inspectNumberObject } from \"./number-object.js\"\nimport { inspectObject } from \"./object.js\"\nimport { inspectRegExp } from \"./regexp.js\"\nimport { inspectStringObject } from \"./string-object.js\"\n\nexport const compositeMap = {\n  Array: inspectArray,\n  BigInt: inspectBigIntObject,\n  Boolean: inspectBooleanObject,\n  Error: inspectError,\n  Date: inspectDate,\n  Function: inspectFunction,\n  Number: inspectNumberObject,\n  Object: inspectObject,\n  RegExp: inspectRegExp,\n  String: inspectStringObject,\n}\n",
    "import { valueToType } from \"./internal/valueToType.js\"\nimport { primitiveMap } from \"./internal/primitiveMap.js\"\nimport { compositeMap } from \"./internal/compositeMap.js\"\nimport { inspectConstructor } from \"./internal/constructor.js\"\nimport { inspectObject } from \"./internal/object.js\"\n\nexport const inspect = (\n  value,\n  {\n    parenthesis = false,\n    singleQuote = false,\n    useNew = false,\n    objectConstructor = false,\n    showFunctionBody = false,\n    indentUsingTab = false,\n    indentSize = 2,\n    numericSeparator = true,\n  } = {},\n) => {\n  const scopedInspect = (scopedValue, scopedOptions) => {\n    const { primitiveType, compositeType } = valueToType(scopedValue)\n    const options = {\n      ...scopedOptions,\n      nestedInspect: (nestedValue, nestedOptions = {}) => {\n        return scopedInspect(nestedValue, {\n          ...scopedOptions,\n          depth: scopedOptions.depth + 1,\n          ...nestedOptions,\n        })\n      },\n    }\n\n    if (primitiveType) {\n      return primitiveMap[primitiveType](scopedValue, options)\n    }\n\n    if (compositeType in compositeMap) {\n      return compositeMap[compositeType](scopedValue, options)\n    }\n\n    return inspectConstructor(`${compositeType}(${inspectObject(scopedValue, options)})`, {\n      ...options,\n      parenthesis: false,\n    })\n  }\n\n  return scopedInspect(value, {\n    parenthesis,\n    singleQuote,\n    useNew,\n    objectConstructor,\n    showFunctionBody,\n    indentUsingTab,\n    indentSize,\n    numericSeparator,\n    depth: 0,\n  })\n}\n"
  ],
  "names": [
    "valueToType",
    "value",
    "primitiveType",
    "valueToPrimitiveType",
    "compositeType",
    "valueToCompositeType",
    "toString",
    "Object",
    "prototype",
    "object",
    "getPrototypeOf",
    "toStringResult",
    "call",
    "tagName",
    "slice",
    "length",
    "objectConstructorName",
    "constructor",
    "name",
    "undefined",
    "inspectBoolean",
    "inspectNull",
    "inspectNumber",
    "numericSeparator",
    "isNegativeZero",
    "Infinity",
    "numberString",
    "String",
    "number",
    "mark",
    "sign",
    "power",
    "match",
    "groups",
    "numberWithSeparators",
    "formatNumber",
    "powerWithSeparators",
    "addSeparator",
    "minimumDigits",
    "groupLength",
    "parts",
    "split",
    "integer",
    "fractional",
    "integerWithSeparators",
    "fractionalWithSeparators",
    "addSeparatorFromLeft",
    "groupDigits",
    "digits",
    "digitCount",
    "digitsWithSeparator",
    "remainingDigits",
    "group",
    "start",
    "end",
    "Math",
    "min",
    "push",
    "join",
    "quote",
    "string",
    "i",
    "j",
    "escapedString",
    "char",
    "escapedChar",
    "preNewLineAndIndentation",
    "depth",
    "indentUsingTab",
    "indentSize",
    "newLineAndIndent",
    "count",
    "useTabs",
    "size",
    "postNewLineAndIndentation",
    "repeat",
    "wrapNewLineAndIndentation",
    "inspectString",
    "singleQuote",
    "quotedValue",
    "inspectSymbol",
    "nestedInspect",
    "parenthesis",
    "symbolDescription",
    "symbolToDescription",
    "symbolDescriptionSource",
    "symbolSource",
    "Symbol",
    "symbol",
    "description",
    "openingParenthesisIndex",
    "indexOf",
    "closingParenthesisIndex",
    "inspectUndefined",
    "inspectBigInt",
    "primitiveMap",
    "boolean",
    "null",
    "bigint",
    "inspectConstructor",
    "useNew",
    "formattedString",
    "inspectArray",
    "seen",
    "valuesSource",
    "valueSource",
    "hasOwnProperty",
    "arraySource",
    "inspectBigIntObject",
    "bigIntSource",
    "valueOf",
    "inspectBooleanObject",
    "booleanSource",
    "inspectError",
    "error",
    "messageSource",
    "message",
    "errorSource",
    "errorToConstructorName",
    "derivedErrorNameArray",
    "includes",
    "inspectDate",
    "dateSource",
    "inspectFunction",
    "showFunctionBody",
    "functionSource",
    "isArrowFunction",
    "head",
    "inspectNumberObject",
    "numberSource",
    "inspectObject",
    "objectConstructor",
    "propertySourceArray",
    "getOwnPropertyNames",
    "forEach",
    "propertyName",
    "propertyNameAsNumber",
    "parseInt",
    "propertyNameSource",
    "Number",
    "isInteger",
    "nameOrSymbolSource",
    "getOwnPropertySymbols",
    "propertiesSource",
    "index",
    "objectSource",
    "inspectRegExp",
    "inspectStringObject",
    "stringSource",
    "compositeMap",
    "Array",
    "BigInt",
    "Boolean",
    "Error",
    "Date",
    "Function",
    "RegExp",
    "inspect",
    "scopedInspect",
    "scopedValue",
    "scopedOptions",
    "options",
    "nestedValue",
    "nestedOptions"
  ],
  "mappings": "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"
}