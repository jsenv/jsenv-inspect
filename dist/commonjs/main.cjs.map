{
  "version": 3,
  "file": "main.cjs",
  "sources": [
    "../../src/internal/valueToType.js",
    "../../src/internal/boolean.js",
    "../../src/internal/null.js",
    "../../src/internal/number.js",
    "../../src/internal/util.js",
    "../../src/internal/string.js",
    "../../src/internal/symbol.js",
    "../../src/internal/undefined.js",
    "../../src/internal/bigint.js",
    "../../src/internal/primitiveMap.js",
    "../../src/internal/constructor.js",
    "../../src/internal/array.js",
    "../../src/internal/bigint-object.js",
    "../../src/internal/boolean-object.js",
    "../../src/internal/error.js",
    "../../src/internal/date.js",
    "../../src/internal/function.js",
    "../../src/internal/number-object.js",
    "../../src/internal/object.js",
    "../../src/internal/regexp.js",
    "../../src/internal/string-object.js",
    "../../src/internal/compositeMap.js",
    "../../src/inspect.js"
  ],
  "sourcesContent": [
    "export const valueToType = (value) => {\n  const primitiveType = valueToPrimitiveType(value)\n  if (primitiveType === \"function\") {\n    return { compositeType: \"Function\" }\n  }\n\n  if (primitiveType === \"object\") {\n    const compositeType = valueToCompositeType(value)\n    return { compositeType }\n  }\n\n  return { primitiveType }\n}\n\nconst { toString } = Object.prototype\n\nconst valueToCompositeType = (object) => {\n  if (typeof object === \"object\" && Object.getPrototypeOf(object) === null) {\n    return \"Object\"\n  }\n\n  const toStringResult = toString.call(object)\n  // returns format is '[object ${tagName}]';\n  // and we want ${tagName}\n  const tagName = toStringResult.slice(\"[object \".length, -1)\n  if (tagName === \"Object\") {\n    const objectConstructorName = object.constructor.name\n    if (objectConstructorName !== \"Object\") {\n      return objectConstructorName\n    }\n  }\n\n  return tagName\n}\n\nconst valueToPrimitiveType = (value) => {\n  if (value === null) {\n    return \"null\"\n  }\n\n  if (value === undefined) {\n    return \"undefined\"\n  }\n\n  return typeof value\n}\n",
    "export const inspectBoolean = (value) => value.toString()\n",
    "export const inspectNull = () => \"null\"\n",
    "export const inspectNumber = (value) => {\n  return isNegativeZero(value) ? \"-0\" : value.toString()\n}\n\n// Use this and instead of Object.is(value, -0)\n// because in some corner cases firefox returns false\n// for Object.is(-0, -0)\nconst isNegativeZero = (value) => {\n  return value === 0 && 1 / value === -Infinity\n}\n",
    "// https://github.com/joliss/js-string-escape/blob/master/index.js\n// http://javascript.crockford.com/remedial.html\nexport const quote = (value) => {\n  const string = String(value)\n  let i = 0\n  const j = string.length\n  var escapedString = \"\"\n  while (i < j) {\n    const char = string[i]\n    let escapedChar\n    if (char === '\"' || char === \"'\" || char === \"\\\\\") {\n      escapedChar = `\\\\${char}`\n    } else if (char === \"\\n\") {\n      escapedChar = \"\\\\n\"\n    } else if (char === \"\\r\") {\n      escapedChar = \"\\\\r\"\n    } else if (char === \"\\u2028\") {\n      escapedChar = \"\\\\u2028\"\n    } else if (char === \"\\u2029\") {\n      escapedChar = \"\\\\u2029\"\n    } else {\n      escapedChar = char\n    }\n    escapedString += escapedChar\n    i++\n  }\n  return escapedString\n}\n\nexport const preNewLineAndIndentation = (value, { depth, indentUsingTab, indentSize }) => {\n  return `${newLineAndIndent({\n    count: depth + 1,\n    useTabs: indentUsingTab,\n    size: indentSize,\n  })}${value}`\n}\n\nconst postNewLineAndIndentation = ({ depth, indentUsingTab, indentSize }) => {\n  return newLineAndIndent({ count: depth, useTabs: indentUsingTab, size: indentSize })\n}\n\nconst newLineAndIndent = ({ count, useTabs, size }) => {\n  if (useTabs) {\n    // eslint-disable-next-line prefer-template\n    return \"\\n\" + \"\\t\".repeat(count)\n  }\n  // eslint-disable-next-line prefer-template\n  return \"\\n\" + \" \".repeat(count * size)\n}\n\nexport const wrapNewLineAndIndentation = (value, { depth, indentUsingTab, indentSize }) => {\n  return `${preNewLineAndIndentation(value, {\n    depth,\n    indentUsingTab,\n    indentSize,\n  })}${postNewLineAndIndentation({ depth, indentUsingTab, indentSize })}`\n}\n",
    "import { quote } from \"./util.js\"\n\nexport const inspectString = (value, { singleQuote }) => {\n  const quotedValue = quote(value)\n  return singleQuote ? `'${quotedValue}'` : `\"${quotedValue}\"`\n}\n",
    "export const inspectSymbol = (value, { nestedInspect, parenthesis }) => {\n  const symbolDescription = symbolToDescription(value)\n  const symbolDescriptionSource = symbolDescription ? nestedInspect(symbolDescription) : \"\"\n  const symbolSource = `Symbol(${symbolDescriptionSource})`\n\n  if (parenthesis) return `${symbolSource}`\n  return symbolSource\n}\n\nconst symbolToDescription =\n  \"description\" in Symbol.prototype\n    ? (symbol) => symbol.description\n    : (symbol) => {\n        const toStringResult = symbol.toString()\n        const openingParenthesisIndex = toStringResult.indexOf(\"(\")\n        const closingParenthesisIndex = toStringResult.indexOf(\")\")\n        const symbolDescription = toStringResult.slice(\n          openingParenthesisIndex + 1,\n          closingParenthesisIndex,\n        )\n        return symbolDescription\n      }\n",
    "export const inspectUndefined = () => \"undefined\"\n",
    "export const inspectBigInt = (value) => {\n  return `${value}n`\n}\n",
    "import { inspectBoolean } from \"./boolean.js\"\nimport { inspectNull } from \"./null.js\"\nimport { inspectNumber } from \"./number.js\"\nimport { inspectString } from \"./string.js\"\nimport { inspectSymbol } from \"./symbol.js\"\nimport { inspectUndefined } from \"./undefined.js\"\nimport { inspectBigInt } from \"./bigint.js\"\n\nexport const primitiveMap = {\n  boolean: inspectBoolean,\n  null: inspectNull,\n  number: inspectNumber,\n  string: inspectString,\n  symbol: inspectSymbol,\n  undefined: inspectUndefined,\n  bigint: inspectBigInt,\n}\n",
    "export const inspectConstructor = (value, { parenthesis, useNew }) => {\n  let formattedString = value\n\n  if (parenthesis) {\n    formattedString = `(${value})`\n  }\n\n  if (useNew) {\n    formattedString = `new ${formattedString}`\n  }\n\n  return formattedString\n}\n",
    "import { preNewLineAndIndentation, wrapNewLineAndIndentation } from \"./util.js\"\nimport { inspectConstructor } from \"./constructor.js\"\n\nexport const inspectArray = (\n  value,\n  { seen = [], nestedInspect, depth, indentUsingTab, indentSize, parenthesis, useNew },\n) => {\n  if (seen.indexOf(value) > -1) {\n    return \"Symbol.for('circular')\"\n  }\n  seen.push(value)\n\n  let valuesSource = \"\"\n  let i = 0\n  const j = value.length\n\n  while (i < j) {\n    const valueSource = value.hasOwnProperty(i) ? nestedInspect(value[i], { seen }) : \"\"\n    if (i === 0) {\n      valuesSource += valueSource\n    } else {\n      valuesSource += `,${preNewLineAndIndentation(valueSource, {\n        depth,\n        indentUsingTab,\n        indentSize,\n      })}`\n    }\n    i++\n  }\n\n  let arraySource\n  if (valuesSource.length) {\n    arraySource = wrapNewLineAndIndentation(valuesSource, { depth, indentUsingTab, indentSize })\n  } else {\n    arraySource = \"\"\n  }\n\n  arraySource = `[${arraySource}]`\n\n  return inspectConstructor(arraySource, { parenthesis, useNew })\n}\n",
    "export const inspectBigIntObject = (value, { nestedInspect }) => {\n  const bigIntSource = nestedInspect(value.valueOf())\n\n  return `BigInt(${bigIntSource})`\n}\n",
    "import { inspectConstructor } from \"./constructor.js\"\n\nexport const inspectBooleanObject = (value, { nestedInspect, useNew, parenthesis }) => {\n  const booleanSource = nestedInspect(value.valueOf())\n  return inspectConstructor(`Boolean(${booleanSource})`, { useNew, parenthesis })\n}\n",
    "import { inspectConstructor } from \"./constructor.js\"\n\nexport const inspectError = (error, { nestedInspect, useNew, parenthesis }) => {\n  const messageSource = nestedInspect(error.message)\n\n  const errorSource = inspectConstructor(`${errorToConstructorName(error)}(${messageSource})`, {\n    useNew,\n    parenthesis,\n  })\n  return errorSource\n}\n\nconst errorToConstructorName = ({ name }) => {\n  if (derivedErrorNameArray.includes(name)) {\n    return name\n  }\n  return \"Error\"\n}\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Error_types\nconst derivedErrorNameArray = [\n  \"EvalError\",\n  \"RangeError\",\n  \"ReferenceError\",\n  \"SyntaxError\",\n  \"TypeError\",\n  \"URIError\",\n]\n",
    "import { inspectConstructor } from \"./constructor.js\"\n\nexport const inspectDate = (value, { nestedInspect, useNew, parenthesis }) => {\n  const dateSource = nestedInspect(value.valueOf())\n  return inspectConstructor(`Date(${dateSource})`, { useNew, parenthesis })\n}\n",
    "export const inspectFunction = (value, { showFunctionBody, parenthesis, depth }) => {\n  let functionSource\n  if (showFunctionBody) {\n    functionSource = value.toString()\n  } else {\n    const isArrowFunction = value.prototype === undefined\n    const head = isArrowFunction ? \"() =>\" : `function ${depth === 0 ? value.name : \"\"}()`\n    functionSource = `${head} {/* hidden */}`\n  }\n\n  if (parenthesis) {\n    return `(${functionSource})`\n  }\n  return functionSource\n}\n",
    "import { inspectConstructor } from \"./constructor.js\"\n\nexport const inspectNumberObject = (value, { nestedInspect, useNew, parenthesis }) => {\n  const numberSource = nestedInspect(value.valueOf())\n  return inspectConstructor(`Number(${numberSource})`, { useNew, parenthesis })\n}\n",
    "import { preNewLineAndIndentation, wrapNewLineAndIndentation } from \"./util.js\"\nimport { inspectConstructor } from \"./constructor.js\"\n\nexport const inspectObject = (\n  value,\n  {\n    nestedInspect,\n    seen = [],\n    depth,\n    indentUsingTab,\n    indentSize,\n    objectConstructor,\n    parenthesis,\n    useNew,\n  },\n) => {\n  if (seen.indexOf(value) > -1) return \"Symbol.for('circular')\"\n\n  seen.push(value)\n\n  const propertySourceArray = []\n  Object.getOwnPropertyNames(value).forEach((propertyName) => {\n    const propertyNameAsNumber = parseInt(propertyName, 10)\n    const propertyNameSource = nestedInspect(\n      Number.isInteger(propertyNameAsNumber) ? propertyNameAsNumber : propertyName,\n    )\n    propertySourceArray.push({\n      nameOrSymbolSource: propertyNameSource,\n      valueSource: nestedInspect(value[propertyName], { seen }),\n    })\n  })\n  Object.getOwnPropertySymbols(value).forEach((symbol) => {\n    propertySourceArray.push({\n      nameOrSymbolSource: `[${nestedInspect(symbol)}]`,\n      valueSource: nestedInspect(value[symbol], { seen }),\n    })\n  })\n\n  let propertiesSource = \"\"\n  propertySourceArray.forEach(({ nameOrSymbolSource, valueSource }, index) => {\n    if (index === 0) {\n      propertiesSource += `${nameOrSymbolSource}: ${valueSource}`\n    } else {\n      propertiesSource += `,${preNewLineAndIndentation(`${nameOrSymbolSource}: ${valueSource}`, {\n        depth,\n        indentUsingTab,\n        indentSize,\n      })}`\n    }\n  })\n\n  let objectSource\n  if (propertiesSource.length) {\n    objectSource = `${wrapNewLineAndIndentation(propertiesSource, {\n      depth,\n      indentUsingTab,\n      indentSize,\n    })}`\n  } else {\n    objectSource = \"\"\n  }\n\n  if (objectConstructor) {\n    objectSource = `Object({${objectSource}})`\n  } else {\n    objectSource = `{${objectSource}}`\n  }\n\n  return inspectConstructor(objectSource, { parenthesis, useNew })\n}\n",
    "export const inspectRegExp = (value) => value.toString()\n",
    "import { inspectConstructor } from \"./constructor.js\"\n\nexport const inspectStringObject = (value, { nestedInspect, useNew, parenthesis }) => {\n  const stringSource = nestedInspect(value.valueOf())\n\n  return inspectConstructor(`String(${stringSource})`, { useNew, parenthesis })\n}\n",
    "import { inspectArray } from \"./array.js\"\nimport { inspectBigIntObject } from \"./bigint-object.js\"\nimport { inspectBooleanObject } from \"./boolean-object.js\"\nimport { inspectError } from \"./error.js\"\nimport { inspectDate } from \"./date.js\"\nimport { inspectFunction } from \"./function.js\"\nimport { inspectNumberObject } from \"./number-object.js\"\nimport { inspectObject } from \"./object.js\"\nimport { inspectRegExp } from \"./regexp.js\"\nimport { inspectStringObject } from \"./string-object.js\"\n\nexport const compositeMap = {\n  Array: inspectArray,\n  BigInt: inspectBigIntObject,\n  Boolean: inspectBooleanObject,\n  Error: inspectError,\n  Date: inspectDate,\n  Function: inspectFunction,\n  Number: inspectNumberObject,\n  Object: inspectObject,\n  RegExp: inspectRegExp,\n  String: inspectStringObject,\n}\n",
    "import { valueToType } from \"./internal/valueToType.js\"\nimport { primitiveMap } from \"./internal/primitiveMap.js\"\nimport { compositeMap } from \"./internal/compositeMap.js\"\nimport { inspectConstructor } from \"./internal/constructor.js\"\nimport { inspectObject } from \"./internal/object.js\"\n\nexport const inspect = (\n  value,\n  {\n    parenthesis = false,\n    singleQuote = false,\n    useNew = false,\n    objectConstructor = false,\n    showFunctionBody = false,\n    indentUsingTab = false,\n    indentSize = 2,\n  } = {},\n) => {\n  const scopedInspect = (scopedValue, scopedOptions) => {\n    const { primitiveType, compositeType } = valueToType(scopedValue)\n    const options = {\n      ...scopedOptions,\n      nestedInspect: (nestedValue, nestedOptions = {}) => {\n        return scopedInspect(nestedValue, {\n          ...scopedOptions,\n          depth: scopedOptions.depth + 1,\n          ...nestedOptions,\n        })\n      },\n    }\n\n    if (primitiveType) {\n      return primitiveMap[primitiveType](scopedValue, options)\n    }\n\n    if (compositeType in compositeMap) {\n      return compositeMap[compositeType](scopedValue, options)\n    }\n\n    return inspectConstructor(`${compositeType}(${inspectObject(scopedValue, options)})`, {\n      ...options,\n      parenthesis: false,\n    })\n  }\n\n  return scopedInspect(value, {\n    parenthesis,\n    singleQuote,\n    useNew,\n    objectConstructor,\n    showFunctionBody,\n    indentUsingTab,\n    indentSize,\n    depth: 0,\n  })\n}\n"
  ],
  "names": [
    "valueToType",
    "value",
    "primitiveType",
    "valueToPrimitiveType",
    "compositeType",
    "valueToCompositeType",
    "toString",
    "Object",
    "prototype",
    "object",
    "getPrototypeOf",
    "toStringResult",
    "call",
    "tagName",
    "slice",
    "length",
    "objectConstructorName",
    "constructor",
    "name",
    "undefined",
    "inspectBoolean",
    "inspectNull",
    "inspectNumber",
    "isNegativeZero",
    "Infinity",
    "quote",
    "string",
    "String",
    "i",
    "j",
    "escapedString",
    "char",
    "escapedChar",
    "preNewLineAndIndentation",
    "depth",
    "indentUsingTab",
    "indentSize",
    "newLineAndIndent",
    "count",
    "useTabs",
    "size",
    "postNewLineAndIndentation",
    "repeat",
    "wrapNewLineAndIndentation",
    "inspectString",
    "singleQuote",
    "quotedValue",
    "inspectSymbol",
    "nestedInspect",
    "parenthesis",
    "symbolDescription",
    "symbolToDescription",
    "symbolDescriptionSource",
    "symbolSource",
    "Symbol",
    "symbol",
    "description",
    "openingParenthesisIndex",
    "indexOf",
    "closingParenthesisIndex",
    "inspectUndefined",
    "inspectBigInt",
    "primitiveMap",
    "boolean",
    "null",
    "number",
    "bigint",
    "inspectConstructor",
    "useNew",
    "formattedString",
    "inspectArray",
    "seen",
    "push",
    "valuesSource",
    "valueSource",
    "hasOwnProperty",
    "arraySource",
    "inspectBigIntObject",
    "bigIntSource",
    "valueOf",
    "inspectBooleanObject",
    "booleanSource",
    "inspectError",
    "error",
    "messageSource",
    "message",
    "errorSource",
    "errorToConstructorName",
    "derivedErrorNameArray",
    "includes",
    "inspectDate",
    "dateSource",
    "inspectFunction",
    "showFunctionBody",
    "functionSource",
    "isArrowFunction",
    "head",
    "inspectNumberObject",
    "numberSource",
    "inspectObject",
    "objectConstructor",
    "propertySourceArray",
    "getOwnPropertyNames",
    "forEach",
    "propertyName",
    "propertyNameAsNumber",
    "parseInt",
    "propertyNameSource",
    "Number",
    "isInteger",
    "nameOrSymbolSource",
    "getOwnPropertySymbols",
    "propertiesSource",
    "index",
    "objectSource",
    "inspectRegExp",
    "inspectStringObject",
    "stringSource",
    "compositeMap",
    "Array",
    "BigInt",
    "Boolean",
    "Error",
    "Date",
    "Function",
    "RegExp",
    "inspect",
    "scopedInspect",
    "scopedValue",
    "scopedOptions",
    "options",
    "nestedValue",
    "nestedOptions"
  ],
  "mappings": "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"
}